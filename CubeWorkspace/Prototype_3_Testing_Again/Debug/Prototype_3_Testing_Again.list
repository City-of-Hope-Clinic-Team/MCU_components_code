
Prototype_3_Testing_Again.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002180  08002180  00012180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021c0  080021c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021c0  080021c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021c0  080021c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021c0  080021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080021d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080021d4  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a216  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f6  00000000  00000000  0002a252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f09b  00000000  00000000  0002ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adf5  00000000  00000000  0004beab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c022d  00000000  00000000  00056ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  00116f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002168 	.word	0x08002168

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002168 	.word	0x08002168

080001cc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80001d4:	2102      	movs	r1, #2
 80001d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001da:	f000 fcdd 	bl	8000b98 <HAL_GPIO_TogglePin>
	numTest += 1;
 80001de:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	3301      	adds	r3, #1
 80001e4:	4a02      	ldr	r2, [pc, #8]	; (80001f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80001e6:	6013      	str	r3, [r2, #0]
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000074 	.word	0x20000074

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  numTest = 0;
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <main+0x40>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fe:	f000 f99e 	bl	800053e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000202:	f000 f81b 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000206:	f000 f8ad 	bl	8000364 <MX_GPIO_Init>
  MX_TIM2_Init();
 800020a:	f000 f85d 	bl	80002c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800020e:	480a      	ldr	r0, [pc, #40]	; (8000238 <main+0x44>)
 8000210:	f001 fb98 	bl	8001944 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000214:	2102      	movs	r1, #2
 8000216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021a:	f000 fcbd 	bl	8000b98 <HAL_GPIO_TogglePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 800021e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000222:	f000 fa01 	bl	8000628 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000226:	2102      	movs	r1, #2
 8000228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022c:	f000 fcb4 	bl	8000b98 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000230:	e7f5      	b.n	800021e <main+0x2a>
 8000232:	bf00      	nop
 8000234:	20000074 	.word	0x20000074
 8000238:	20000028 	.word	0x20000028

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b096      	sub	sp, #88	; 0x58
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0314 	add.w	r3, r7, #20
 8000246:	2244      	movs	r2, #68	; 0x44
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 ff84 	bl	8002158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	463b      	mov	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800025e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000262:	f000 fcc1 	bl	8000be8 <HAL_PWREx_ControlVoltageScaling>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800026c:	f000 f8aa 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000270:	2302      	movs	r3, #2
 8000272:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000278:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	2310      	movs	r3, #16
 800027c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	2300      	movs	r3, #0
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fd04 	bl	8000c94 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000292:	f000 f897 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	2301      	movs	r3, #1
 800029c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002aa:	463b      	mov	r3, r7
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 f904 	bl	80014bc <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f883 	bl	80003c4 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3758      	adds	r7, #88	; 0x58
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <MX_TIM2_Init+0x98>)
 80002e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80002ee:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <MX_TIM2_Init+0x98>)
 80002f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f6:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <MX_TIM2_Init+0x98>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_TIM2_Init+0x98>)
 80002fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_TIM2_Init+0x98>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_TIM2_Init+0x98>)
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000310:	4813      	ldr	r0, [pc, #76]	; (8000360 <MX_TIM2_Init+0x98>)
 8000312:	f001 fabf 	bl	8001894 <HAL_TIM_Base_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800031c:	f000 f852 	bl	80003c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <MX_TIM2_Init+0x98>)
 800032e:	f001 fc7c 	bl	8001c2a <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000338:	f000 f844 	bl	80003c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_TIM2_Init+0x98>)
 800034a:	f001 fe5d 	bl	8002008 <HAL_TIMEx_MasterConfigSynchronization>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000354:	f000 f836 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	3720      	adds	r7, #32
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000028 	.word	0x20000028

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_GPIO_Init+0x5c>)
 800037a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <MX_GPIO_Init+0x5c>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_GPIO_Init+0x5c>)
 8000386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2102      	movs	r1, #2
 8000394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000398:	f000 fbe6 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800039c:	2302      	movs	r3, #2
 800039e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a0:	2301      	movs	r3, #1
 80003a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4619      	mov	r1, r3
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f000 fa6e 	bl	8000894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	e7fe      	b.n	80003cc <Error_Handler+0x8>
	...

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <HAL_MspInit+0x44>)
 80003d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_MspInit+0x44>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6613      	str	r3, [r2, #96]	; 0x60
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x44>)
 80003e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <HAL_MspInit+0x44>)
 80003f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003f2:	4a08      	ldr	r2, [pc, #32]	; (8000414 <HAL_MspInit+0x44>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	6593      	str	r3, [r2, #88]	; 0x58
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_MspInit+0x44>)
 80003fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000428:	d113      	bne.n	8000452 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <HAL_TIM_Base_MspInit+0x44>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <HAL_TIM_Base_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6593      	str	r3, [r2, #88]	; 0x58
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <HAL_TIM_Base_MspInit+0x44>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	201c      	movs	r0, #28
 8000448:	f000 f9ed 	bl	8000826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800044c:	201c      	movs	r0, #28
 800044e:	f000 fa06 	bl	800085e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ac:	f000 f89c 	bl	80005e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //HAL_SYSTICK_IRQHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <TIM2_IRQHandler+0x10>)
 80004ba:	f001 fa97 	bl	80019ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000028 	.word	0x20000028

080004c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <SystemInit+0x20>)
 80004ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004d2:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <SystemInit+0x20>)
 80004d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000524 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f0:	f7ff ffea 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	; (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	; (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051a:	f001 fdf9 	bl	8002110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051e:	f7ff fe69 	bl	80001f4 <main>

08000522 <LoopForever>:

LoopForever:
    b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000524:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000530:	080021c8 	.word	0x080021c8
  ldr r2, =_sbss
 8000534:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000538:	2000007c 	.word	0x2000007c

0800053c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_IRQHandler>

0800053e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000544:	2300      	movs	r3, #0
 8000546:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f961 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800054e:	200f      	movs	r0, #15
 8000550:	f000 f80e 	bl	8000570 <HAL_InitTick>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d002      	beq.n	8000560 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	e001      	b.n	8000564 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000560:	f7ff ff36 	bl	80003d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000564:	79fb      	ldrb	r3, [r7, #7]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_InitTick+0x6c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d023      	beq.n	80005cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_InitTick+0x70>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <HAL_InitTick+0x6c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000592:	fbb3 f3f1 	udiv	r3, r3, r1
 8000596:	fbb2 f3f3 	udiv	r3, r2, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f96d 	bl	800087a <HAL_SYSTICK_Config>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d10f      	bne.n	80005c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b0f      	cmp	r3, #15
 80005aa:	d809      	bhi.n	80005c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ac:	2200      	movs	r2, #0
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	f000 f937 	bl	8000826 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005b8:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <HAL_InitTick+0x74>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	e007      	b.n	80005d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e004      	b.n	80005d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e001      	b.n	80005d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x20>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_IncTick+0x24>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <HAL_IncTick+0x24>)
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000008 	.word	0x20000008
 800060c:	20000078 	.word	0x20000078

08000610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return uwTick;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <HAL_GetTick+0x14>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000078 	.word	0x20000078

08000628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000630:	f7ff ffee 	bl	8000610 <HAL_GetTick>
 8000634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000640:	d005      	beq.n	800064e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_Delay+0x44>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800064e:	bf00      	nop
 8000650:	f7ff ffde 	bl	8000610 <HAL_GetTick>
 8000654:	4602      	mov	r2, r0
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	429a      	cmp	r2, r3
 800065e:	d8f7      	bhi.n	8000650 <HAL_Delay+0x28>
  {
  }
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000008 	.word	0x20000008

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db0b      	blt.n	80006fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 021f 	and.w	r2, r3, #31
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <__NVIC_EnableIRQ+0x38>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	2001      	movs	r0, #1
 80006f6:	fa00 f202 	lsl.w	r2, r0, r2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e100 	.word	0xe000e100

08000710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	db0a      	blt.n	800073a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	490c      	ldr	r1, [pc, #48]	; (800075c <__NVIC_SetPriority+0x4c>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	440b      	add	r3, r1
 8000734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000738:	e00a      	b.n	8000750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <__NVIC_SetPriority+0x50>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	3b04      	subs	r3, #4
 8000748:	0112      	lsls	r2, r2, #4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	440b      	add	r3, r1
 800074e:	761a      	strb	r2, [r3, #24]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b480      	push	{r7}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f1c3 0307 	rsb	r3, r3, #7
 800077e:	2b04      	cmp	r3, #4
 8000780:	bf28      	it	cs
 8000782:	2304      	movcs	r3, #4
 8000784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3304      	adds	r3, #4
 800078a:	2b06      	cmp	r3, #6
 800078c:	d902      	bls.n	8000794 <NVIC_EncodePriority+0x30>
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3b03      	subs	r3, #3
 8000792:	e000      	b.n	8000796 <NVIC_EncodePriority+0x32>
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	f04f 32ff 	mov.w	r2, #4294967295
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43da      	mvns	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	401a      	ands	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	43d9      	mvns	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	4313      	orrs	r3, r2
         );
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3724      	adds	r7, #36	; 0x24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007dc:	d301      	bcc.n	80007e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007de:	2301      	movs	r3, #1
 80007e0:	e00f      	b.n	8000802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <SysTick_Config+0x40>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ea:	210f      	movs	r1, #15
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f7ff ff8e 	bl	8000710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <SysTick_Config+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <SysTick_Config+0x40>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	e000e010 	.word	0xe000e010

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff29 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000838:	f7ff ff3e 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 800083c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f7ff ff8e 	bl	8000764 <NVIC_EncodePriority>
 8000848:	4602      	mov	r2, r0
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff5d 	bl	8000710 <__NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff31 	bl	80006d4 <__NVIC_EnableIRQ>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffa2 	bl	80007cc <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a2:	e148      	b.n	8000b36 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 813a 	beq.w	8000b30 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f003 0303 	and.w	r3, r3, #3
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d005      	beq.n	80008d4 <HAL_GPIO_Init+0x40>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f003 0303 	and.w	r3, r3, #3
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d130      	bne.n	8000936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800090a:	2201      	movs	r2, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	091b      	lsrs	r3, r3, #4
 8000920:	f003 0201 	and.w	r2, r3, #1
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	2b03      	cmp	r3, #3
 8000940:	d017      	beq.n	8000972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	2b02      	cmp	r3, #2
 800097c:	d123      	bne.n	80009c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	08da      	lsrs	r2, r3, #3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3208      	adds	r2, #8
 8000986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	691a      	ldr	r2, [r3, #16]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	f003 0307 	and.w	r3, r3, #7
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	6939      	ldr	r1, [r7, #16]
 80009c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2203      	movs	r2, #3
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0203 	and.w	r2, r3, #3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 8094 	beq.w	8000b30 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a08:	4b52      	ldr	r3, [pc, #328]	; (8000b54 <HAL_GPIO_Init+0x2c0>)
 8000a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0c:	4a51      	ldr	r2, [pc, #324]	; (8000b54 <HAL_GPIO_Init+0x2c0>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6613      	str	r3, [r2, #96]	; 0x60
 8000a14:	4b4f      	ldr	r3, [pc, #316]	; (8000b54 <HAL_GPIO_Init+0x2c0>)
 8000a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a20:	4a4d      	ldr	r2, [pc, #308]	; (8000b58 <HAL_GPIO_Init+0x2c4>)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a4a:	d00d      	beq.n	8000a68 <HAL_GPIO_Init+0x1d4>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a43      	ldr	r2, [pc, #268]	; (8000b5c <HAL_GPIO_Init+0x2c8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x1d0>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a42      	ldr	r2, [pc, #264]	; (8000b60 <HAL_GPIO_Init+0x2cc>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d101      	bne.n	8000a60 <HAL_GPIO_Init+0x1cc>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e004      	b.n	8000a6a <HAL_GPIO_Init+0x1d6>
 8000a60:	2307      	movs	r3, #7
 8000a62:	e002      	b.n	8000a6a <HAL_GPIO_Init+0x1d6>
 8000a64:	2301      	movs	r3, #1
 8000a66:	e000      	b.n	8000a6a <HAL_GPIO_Init+0x1d6>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	f002 0203 	and.w	r2, r2, #3
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	4093      	lsls	r3, r2
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a7a:	4937      	ldr	r1, [pc, #220]	; (8000b58 <HAL_GPIO_Init+0x2c4>)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3302      	adds	r3, #2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a88:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aac:	4a2d      	ldr	r2, [pc, #180]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b00:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f47f aeaf 	bne.w	80008a4 <HAL_GPIO_Init+0x10>
  }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b78:	787b      	ldrb	r3, [r7, #1]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	041a      	lsls	r2, r3, #16
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43d9      	mvns	r1, r3
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	400b      	ands	r3, r1
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	619a      	str	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40007000 	.word	0x40007000

08000be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf6:	d130      	bne.n	8000c5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c04:	d038      	beq.n	8000c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c0e:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2232      	movs	r2, #50	; 0x32
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c22:	fba2 2303 	umull	r2, r3, r2, r3
 8000c26:	0c9b      	lsrs	r3, r3, #18
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c2c:	e002      	b.n	8000c34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c40:	d102      	bne.n	8000c48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1f2      	bne.n	8000c2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c54:	d110      	bne.n	8000c78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e00f      	b.n	8000c7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c66:	d007      	beq.n	8000c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c70:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	431bde83 	.word	0x431bde83

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f000 bc02 	b.w	80014ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca8:	4b96      	ldr	r3, [pc, #600]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 030c 	and.w	r3, r3, #12
 8000cb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cb2:	4b94      	ldr	r3, [pc, #592]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f000 80e4 	beq.w	8000e92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d007      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x4c>
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2b0c      	cmp	r3, #12
 8000cd4:	f040 808b 	bne.w	8000dee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	f040 8087 	bne.w	8000dee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ce0:	4b88      	ldr	r3, [pc, #544]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x64>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e3d9      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a1a      	ldr	r2, [r3, #32]
 8000cfc:	4b81      	ldr	r3, [pc, #516]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0308 	and.w	r3, r3, #8
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d004      	beq.n	8000d12 <HAL_RCC_OscConfig+0x7e>
 8000d08:	4b7e      	ldr	r3, [pc, #504]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d10:	e005      	b.n	8000d1e <HAL_RCC_OscConfig+0x8a>
 8000d12:	4b7c      	ldr	r3, [pc, #496]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d223      	bcs.n	8000d6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fd54 	bl	80017d4 <RCC_SetFlashLatencyFromMSIRange>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e3ba      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d36:	4b73      	ldr	r3, [pc, #460]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a72      	ldr	r2, [pc, #456]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b70      	ldr	r3, [pc, #448]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	496d      	ldr	r1, [pc, #436]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d54:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	4968      	ldr	r1, [pc, #416]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]
 8000d68:	e025      	b.n	8000db6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d6a:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a65      	ldr	r2, [pc, #404]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b63      	ldr	r3, [pc, #396]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	4960      	ldr	r1, [pc, #384]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d88:	4b5e      	ldr	r3, [pc, #376]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	495b      	ldr	r1, [pc, #364]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d109      	bne.n	8000db6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fd14 	bl	80017d4 <RCC_SetFlashLatencyFromMSIRange>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e37a      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000db6:	f000 fc81 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	4950      	ldr	r1, [pc, #320]	; (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000dc8:	5ccb      	ldrb	r3, [r1, r3]
 8000dca:	f003 031f 	and.w	r3, r3, #31
 8000dce:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd2:	4a4e      	ldr	r2, [pc, #312]	; (8000f0c <HAL_RCC_OscConfig+0x278>)
 8000dd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dd6:	4b4e      	ldr	r3, [pc, #312]	; (8000f10 <HAL_RCC_OscConfig+0x27c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fbc8 	bl	8000570 <HAL_InitTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d052      	beq.n	8000e90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	e35e      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d032      	beq.n	8000e5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a42      	ldr	r2, [pc, #264]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fc05 	bl	8000610 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fc01 	bl	8000610 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e347      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a35      	ldr	r2, [pc, #212]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4930      	ldr	r1, [pc, #192]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	492b      	ldr	r1, [pc, #172]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]
 8000e5a:	e01a      	b.n	8000e92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fbd2 	bl	8000610 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e70:	f7ff fbce 	bl	8000610 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e314      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x1dc>
 8000e8e:	e000      	b.n	8000e92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d073      	beq.n	8000f86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	d005      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x21c>
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2b0c      	cmp	r3, #12
 8000ea8:	d10e      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d10b      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d063      	beq.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d15f      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e2f1      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d106      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e025      	b.n	8000f2c <HAL_RCC_OscConfig+0x298>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee8:	d114      	bne.n	8000f14 <HAL_RCC_OscConfig+0x280>
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e013      	b.n	8000f2c <HAL_RCC_OscConfig+0x298>
 8000f04:	40021000 	.word	0x40021000
 8000f08:	08002180 	.word	0x08002180
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000004 	.word	0x20000004
 8000f14:	4ba0      	ldr	r3, [pc, #640]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a9f      	ldr	r2, [pc, #636]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b9d      	ldr	r3, [pc, #628]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a9c      	ldr	r2, [pc, #624]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d013      	beq.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff fb6c 	bl	8000610 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fb68 	bl	8000610 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	; 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e2ae      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f4e:	4b92      	ldr	r3, [pc, #584]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x2a8>
 8000f5a:	e014      	b.n	8000f86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fb58 	bl	8000610 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fb54 	bl	8000610 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e29a      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f76:	4b88      	ldr	r3, [pc, #544]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x2d0>
 8000f82:	e000      	b.n	8000f86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d060      	beq.n	8001054 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d005      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x310>
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b0c      	cmp	r3, #12
 8000f9c:	d119      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d116      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <HAL_RCC_OscConfig+0x328>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e277      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	061b      	lsls	r3, r3, #24
 8000fca:	4973      	ldr	r1, [pc, #460]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd0:	e040      	b.n	8001054 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d023      	beq.n	8001022 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fda:	4b6f      	ldr	r3, [pc, #444]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6e      	ldr	r2, [pc, #440]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fb13 	bl	8000610 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fee:	f7ff fb0f 	bl	8000610 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e255      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001000:	4b65      	ldr	r3, [pc, #404]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b62      	ldr	r3, [pc, #392]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	061b      	lsls	r3, r3, #24
 800101a:	495f      	ldr	r1, [pc, #380]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
 8001020:	e018      	b.n	8001054 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a5c      	ldr	r2, [pc, #368]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102e:	f7ff faef 	bl	8000610 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001036:	f7ff faeb 	bl	8000610 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e231      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001048:	4b53      	ldr	r3, [pc, #332]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b00      	cmp	r3, #0
 800105e:	d03c      	beq.n	80010da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d01c      	beq.n	80010a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001068:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 800106a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800106e:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001078:	f7ff faca 	bl	8000610 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fac6 	bl	8000610 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e20c      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0ef      	beq.n	8001080 <HAL_RCC_OscConfig+0x3ec>
 80010a0:	e01b      	b.n	80010da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 80010a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a8:	4a3b      	ldr	r2, [pc, #236]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 80010aa:	f023 0301 	bic.w	r3, r3, #1
 80010ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b2:	f7ff faad 	bl	8000610 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ba:	f7ff faa9 	bl	8000610 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e1ef      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 80010ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1ef      	bne.n	80010ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80a6 	beq.w	8001234 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10d      	bne.n	8001114 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6593      	str	r3, [r2, #88]	; 0x58
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001110:	2301      	movs	r3, #1
 8001112:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_RCC_OscConfig+0x508>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111c:	2b00      	cmp	r3, #0
 800111e:	d118      	bne.n	8001152 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_RCC_OscConfig+0x508>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_RCC_OscConfig+0x508>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800112c:	f7ff fa70 	bl	8000610 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001134:	f7ff fa6c 	bl	8000610 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1b2      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_RCC_OscConfig+0x508>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d108      	bne.n	800116c <HAL_RCC_OscConfig+0x4d8>
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 800115c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800116a:	e029      	b.n	80011c0 <HAL_RCC_OscConfig+0x52c>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b05      	cmp	r3, #5
 8001172:	d115      	bne.n	80011a0 <HAL_RCC_OscConfig+0x50c>
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 8001186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118a:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_RCC_OscConfig+0x504>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001194:	e014      	b.n	80011c0 <HAL_RCC_OscConfig+0x52c>
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000
 80011a0:	4b9a      	ldr	r3, [pc, #616]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a6:	4a99      	ldr	r2, [pc, #612]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b0:	4b96      	ldr	r3, [pc, #600]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80011b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b6:	4a95      	ldr	r2, [pc, #596]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d016      	beq.n	80011f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c8:	f7ff fa22 	bl	8000610 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d0:	f7ff fa1e 	bl	8000610 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e162      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e6:	4b89      	ldr	r3, [pc, #548]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80011e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0ed      	beq.n	80011d0 <HAL_RCC_OscConfig+0x53c>
 80011f4:	e015      	b.n	8001222 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f6:	f7ff fa0b 	bl	8000610 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fa07 	bl	8000610 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e14b      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001214:	4b7d      	ldr	r3, [pc, #500]	; (800140c <HAL_RCC_OscConfig+0x778>)
 8001216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1ed      	bne.n	80011fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001222:	7ffb      	ldrb	r3, [r7, #31]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d105      	bne.n	8001234 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001228:	4b78      	ldr	r3, [pc, #480]	; (800140c <HAL_RCC_OscConfig+0x778>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	4a77      	ldr	r2, [pc, #476]	; (800140c <HAL_RCC_OscConfig+0x778>)
 800122e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001232:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b00      	cmp	r3, #0
 800123e:	d03c      	beq.n	80012ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01c      	beq.n	8001282 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001248:	4b70      	ldr	r3, [pc, #448]	; (800140c <HAL_RCC_OscConfig+0x778>)
 800124a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800124e:	4a6f      	ldr	r2, [pc, #444]	; (800140c <HAL_RCC_OscConfig+0x778>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001258:	f7ff f9da 	bl	8000610 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001260:	f7ff f9d6 	bl	8000610 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e11c      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001272:	4b66      	ldr	r3, [pc, #408]	; (800140c <HAL_RCC_OscConfig+0x778>)
 8001274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0ef      	beq.n	8001260 <HAL_RCC_OscConfig+0x5cc>
 8001280:	e01b      	b.n	80012ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <HAL_RCC_OscConfig+0x778>)
 8001284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001288:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_RCC_OscConfig+0x778>)
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001292:	f7ff f9bd 	bl	8000610 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800129a:	f7ff f9b9 	bl	8000610 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0ff      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012ac:	4b57      	ldr	r3, [pc, #348]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80012ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1ef      	bne.n	800129a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80f3 	beq.w	80014aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	f040 80c9 	bne.w	8001460 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012ce:	4b4f      	ldr	r3, [pc, #316]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	429a      	cmp	r2, r3
 80012e0:	d12c      	bne.n	800133c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	3b01      	subs	r3, #1
 80012ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d123      	bne.n	800133c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001300:	429a      	cmp	r2, r3
 8001302:	d11b      	bne.n	800133c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d113      	bne.n	800133c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	3b01      	subs	r3, #1
 8001322:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001324:	429a      	cmp	r2, r3
 8001326:	d109      	bne.n	800133c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	085b      	lsrs	r3, r3, #1
 8001334:	3b01      	subs	r3, #1
 8001336:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001338:	429a      	cmp	r2, r3
 800133a:	d06b      	beq.n	8001414 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d062      	beq.n	8001408 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_RCC_OscConfig+0x778>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0ac      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <HAL_RCC_OscConfig+0x778>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a2d      	ldr	r2, [pc, #180]	; (800140c <HAL_RCC_OscConfig+0x778>)
 8001358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800135c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800135e:	f7ff f957 	bl	8000610 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff f953 	bl	8000610 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e099      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_RCC_OscConfig+0x778>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f0      	bne.n	8001366 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_RCC_OscConfig+0x778>)
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_RCC_OscConfig+0x77c>)
 800138a:	4013      	ands	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001394:	3a01      	subs	r2, #1
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	4311      	orrs	r1, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800139e:	0212      	lsls	r2, r2, #8
 80013a0:	4311      	orrs	r1, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013a6:	0852      	lsrs	r2, r2, #1
 80013a8:	3a01      	subs	r2, #1
 80013aa:	0552      	lsls	r2, r2, #21
 80013ac:	4311      	orrs	r1, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013b2:	0852      	lsrs	r2, r2, #1
 80013b4:	3a01      	subs	r2, #1
 80013b6:	0652      	lsls	r2, r2, #25
 80013b8:	4311      	orrs	r1, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013be:	06d2      	lsls	r2, r2, #27
 80013c0:	430a      	orrs	r2, r1
 80013c2:	4912      	ldr	r1, [pc, #72]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80013ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80013da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013e0:	f7ff f916 	bl	8000610 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff f912 	bl	8000610 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e058      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_RCC_OscConfig+0x778>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001406:	e050      	b.n	80014aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e04f      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
 800140c:	40021000 	.word	0x40021000
 8001410:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d144      	bne.n	80014aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 8001426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001436:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001438:	f7ff f8ea 	bl	8000610 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff f8e6 	bl	8000610 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e02c      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x7ac>
 800145e:	e024      	b.n	80014aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d01f      	beq.n	80014a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 800146c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff f8cd 	bl	8000610 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff f8c9 	bl	8000610 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e00f      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	4905      	ldr	r1, [pc, #20]	; (80014b4 <HAL_RCC_OscConfig+0x820>)
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_RCC_OscConfig+0x824>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	60cb      	str	r3, [r1, #12]
 80014a4:	e001      	b.n	80014aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	feeefffc 	.word	0xfeeefffc

080014bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0e7      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <HAL_RCC_ClockConfig+0x1ec>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d910      	bls.n	8001500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <HAL_RCC_ClockConfig+0x1ec>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 0207 	bic.w	r2, r3, #7
 80014e6:	4970      	ldr	r1, [pc, #448]	; (80016a8 <HAL_RCC_ClockConfig+0x1ec>)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ee:	4b6e      	ldr	r3, [pc, #440]	; (80016a8 <HAL_RCC_ClockConfig+0x1ec>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0cf      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d010      	beq.n	800152e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	4b66      	ldr	r3, [pc, #408]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001518:	429a      	cmp	r2, r3
 800151a:	d908      	bls.n	800152e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151c:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4960      	ldr	r1, [pc, #384]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d04c      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001542:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d121      	bne.n	8001592 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0a6      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	4b54      	ldr	r3, [pc, #336]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d115      	bne.n	8001592 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e09a      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001572:	4b4e      	ldr	r3, [pc, #312]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e08e      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001582:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e086      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f023 0203 	bic.w	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4943      	ldr	r1, [pc, #268]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a4:	f7ff f834 	bl	8000610 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ac:	f7ff f830 	bl	8000610 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e06e      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 020c 	and.w	r2, r3, #12
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d1eb      	bne.n	80015ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d010      	beq.n	8001602 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d208      	bcs.n	8001602 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	492b      	ldr	r1, [pc, #172]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d210      	bcs.n	8001632 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 0207 	bic.w	r2, r3, #7
 8001618:	4923      	ldr	r1, [pc, #140]	; (80016a8 <HAL_RCC_ClockConfig+0x1ec>)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d001      	beq.n	8001632 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e036      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	4918      	ldr	r1, [pc, #96]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d009      	beq.n	8001670 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4910      	ldr	r1, [pc, #64]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001670:	f000 f824 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 8001674:	4602      	mov	r2, r0
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_RCC_ClockConfig+0x1f0>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	490b      	ldr	r1, [pc, #44]	; (80016b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001682:	5ccb      	ldrb	r3, [r1, r3]
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1f8>)
 800168e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1fc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff6b 	bl	8000570 <HAL_InitTick>
 800169a:	4603      	mov	r3, r0
 800169c:	72fb      	strb	r3, [r7, #11]

  return status;
 800169e:	7afb      	ldrb	r3, [r7, #11]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08002180 	.word	0x08002180
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4b3e      	ldr	r3, [pc, #248]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d4:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x34>
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d121      	bne.n	800172e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d11e      	bne.n	800172e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d107      	bne.n	800170c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	e005      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001718:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10d      	bne.n	8001744 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d102      	bne.n	800173a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_GetSysClockFreq+0x110>)
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	e004      	b.n	8001744 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d101      	bne.n	8001744 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001740:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001742:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d134      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d003      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0xa6>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d003      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0xac>
 8001760:	e005      	b.n	800176e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_RCC_GetSysClockFreq+0x110>)
 8001764:	617b      	str	r3, [r7, #20]
      break;
 8001766:	e005      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800176a:	617b      	str	r3, [r7, #20]
      break;
 800176c:	e002      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	617b      	str	r3, [r7, #20]
      break;
 8001772:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	3301      	adds	r3, #1
 8001780:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	fb03 f202 	mul.w	r2, r3, r2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	fbb2 f3f3 	udiv	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	0e5b      	lsrs	r3, r3, #25
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	3301      	adds	r3, #1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017b4:	69bb      	ldr	r3, [r7, #24]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	08002190 	.word	0x08002190
 80017cc:	00f42400 	.word	0x00f42400
 80017d0:	007a1200 	.word	0x007a1200

080017d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017ec:	f7ff f9ee 	bl	8000bcc <HAL_PWREx_GetVoltageRange>
 80017f0:	6178      	str	r0, [r7, #20]
 80017f2:	e014      	b.n	800181e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4a24      	ldr	r2, [pc, #144]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800180c:	f7ff f9de 	bl	8000bcc <HAL_PWREx_GetVoltageRange>
 8001810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001824:	d10b      	bne.n	800183e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b80      	cmp	r3, #128	; 0x80
 800182a:	d919      	bls.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2ba0      	cmp	r3, #160	; 0xa0
 8001830:	d902      	bls.n	8001838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001832:	2302      	movs	r3, #2
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	e013      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	e010      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b80      	cmp	r3, #128	; 0x80
 8001842:	d902      	bls.n	800184a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001844:	2303      	movs	r3, #3
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e00a      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d102      	bne.n	8001856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e004      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b70      	cmp	r3, #112	; 0x70
 800185a:	d101      	bne.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 0207 	bic.w	r2, r3, #7
 8001868:	4909      	ldr	r1, [pc, #36]	; (8001890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	40022000 	.word	0x40022000

08001894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e049      	b.n	800193a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fdac 	bl	8000418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3304      	adds	r3, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f000 fa9a 	bl	8001e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d001      	beq.n	800195c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e03b      	b.n	80019d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d009      	beq.n	8001992 <HAL_TIM_Base_Start_IT+0x4e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001986:	d004      	beq.n	8001992 <HAL_TIM_Base_Start_IT+0x4e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d115      	bne.n	80019be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800199a:	4013      	ands	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d015      	beq.n	80019d0 <HAL_TIM_Base_Start_IT+0x8c>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d011      	beq.n	80019d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019bc:	e008      	b.n	80019d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e000      	b.n	80019d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40012c00 	.word	0x40012c00
 80019e4:	40014000 	.word	0x40014000
 80019e8:	00010007 	.word	0x00010007

080019ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d122      	bne.n	8001a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d11b      	bne.n	8001a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0202 	mvn.w	r2, #2
 8001a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f9ce 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001a34:	e005      	b.n	8001a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f9c0 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f9d1 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d122      	bne.n	8001a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d11b      	bne.n	8001a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 0204 	mvn.w	r2, #4
 8001a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f9a4 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001a88:	e005      	b.n	8001a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f996 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f9a7 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d122      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d11b      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0208 	mvn.w	r2, #8
 8001ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f97a 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001adc:	e005      	b.n	8001aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f96c 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f97d 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d122      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d11b      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0210 	mvn.w	r2, #16
 8001b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f950 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001b30:	e005      	b.n	8001b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f942 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f953 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d10e      	bne.n	8001b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0201 	mvn.w	r2, #1
 8001b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7fe fb2e 	bl	80001cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	2b80      	cmp	r3, #128	; 0x80
 8001b7c:	d10e      	bne.n	8001b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b88:	2b80      	cmp	r3, #128	; 0x80
 8001b8a:	d107      	bne.n	8001b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 faa6 	bl	80020e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001baa:	d10e      	bne.n	8001bca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb6:	2b80      	cmp	r3, #128	; 0x80
 8001bb8:	d107      	bne.n	8001bca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fa99 	bl	80020fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd4:	2b40      	cmp	r3, #64	; 0x40
 8001bd6:	d10e      	bne.n	8001bf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d107      	bne.n	8001bf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f901 	bl	8001df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d10e      	bne.n	8001c22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d107      	bne.n	8001c22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f06f 0220 	mvn.w	r2, #32
 8001c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa59 	bl	80020d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_ConfigClockSource+0x1c>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0b6      	b.n	8001db4 <HAL_TIM_ConfigClockSource+0x18a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2202      	movs	r2, #2
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c70:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c82:	d03e      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0xd8>
 8001c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c88:	f200 8087 	bhi.w	8001d9a <HAL_TIM_ConfigClockSource+0x170>
 8001c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c90:	f000 8086 	beq.w	8001da0 <HAL_TIM_ConfigClockSource+0x176>
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c98:	d87f      	bhi.n	8001d9a <HAL_TIM_ConfigClockSource+0x170>
 8001c9a:	2b70      	cmp	r3, #112	; 0x70
 8001c9c:	d01a      	beq.n	8001cd4 <HAL_TIM_ConfigClockSource+0xaa>
 8001c9e:	2b70      	cmp	r3, #112	; 0x70
 8001ca0:	d87b      	bhi.n	8001d9a <HAL_TIM_ConfigClockSource+0x170>
 8001ca2:	2b60      	cmp	r3, #96	; 0x60
 8001ca4:	d050      	beq.n	8001d48 <HAL_TIM_ConfigClockSource+0x11e>
 8001ca6:	2b60      	cmp	r3, #96	; 0x60
 8001ca8:	d877      	bhi.n	8001d9a <HAL_TIM_ConfigClockSource+0x170>
 8001caa:	2b50      	cmp	r3, #80	; 0x50
 8001cac:	d03c      	beq.n	8001d28 <HAL_TIM_ConfigClockSource+0xfe>
 8001cae:	2b50      	cmp	r3, #80	; 0x50
 8001cb0:	d873      	bhi.n	8001d9a <HAL_TIM_ConfigClockSource+0x170>
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d058      	beq.n	8001d68 <HAL_TIM_ConfigClockSource+0x13e>
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d86f      	bhi.n	8001d9a <HAL_TIM_ConfigClockSource+0x170>
 8001cba:	2b30      	cmp	r3, #48	; 0x30
 8001cbc:	d064      	beq.n	8001d88 <HAL_TIM_ConfigClockSource+0x15e>
 8001cbe:	2b30      	cmp	r3, #48	; 0x30
 8001cc0:	d86b      	bhi.n	8001d9a <HAL_TIM_ConfigClockSource+0x170>
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d060      	beq.n	8001d88 <HAL_TIM_ConfigClockSource+0x15e>
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d867      	bhi.n	8001d9a <HAL_TIM_ConfigClockSource+0x170>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d05c      	beq.n	8001d88 <HAL_TIM_ConfigClockSource+0x15e>
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d05a      	beq.n	8001d88 <HAL_TIM_ConfigClockSource+0x15e>
 8001cd2:	e062      	b.n	8001d9a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6899      	ldr	r1, [r3, #8]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f000 f970 	bl	8001fc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cf6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	609a      	str	r2, [r3, #8]
      break;
 8001d00:	e04f      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6899      	ldr	r1, [r3, #8]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f000 f959 	bl	8001fc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d24:	609a      	str	r2, [r3, #8]
      break;
 8001d26:	e03c      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	461a      	mov	r2, r3
 8001d36:	f000 f8cd 	bl	8001ed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2150      	movs	r1, #80	; 0x50
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f926 	bl	8001f92 <TIM_ITRx_SetConfig>
      break;
 8001d46:	e02c      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	461a      	mov	r2, r3
 8001d56:	f000 f8ec 	bl	8001f32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2160      	movs	r1, #96	; 0x60
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f916 	bl	8001f92 <TIM_ITRx_SetConfig>
      break;
 8001d66:	e01c      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f000 f8ad 	bl	8001ed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 f906 	bl	8001f92 <TIM_ITRx_SetConfig>
      break;
 8001d86:	e00c      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f000 f8fd 	bl	8001f92 <TIM_ITRx_SetConfig>
      break;
 8001d98:	e003      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9e:	e000      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001da0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a2a      	ldr	r2, [pc, #168]	; (8001ec8 <TIM_Base_SetConfig+0xbc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d003      	beq.n	8001e2c <TIM_Base_SetConfig+0x20>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2a:	d108      	bne.n	8001e3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <TIM_Base_SetConfig+0xbc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00b      	beq.n	8001e5e <TIM_Base_SetConfig+0x52>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d007      	beq.n	8001e5e <TIM_Base_SetConfig+0x52>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <TIM_Base_SetConfig+0xc0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <TIM_Base_SetConfig+0x52>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <TIM_Base_SetConfig+0xc4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d108      	bne.n	8001e70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <TIM_Base_SetConfig+0xbc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <TIM_Base_SetConfig+0xa0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <TIM_Base_SetConfig+0xc0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d003      	beq.n	8001eac <TIM_Base_SetConfig+0xa0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <TIM_Base_SetConfig+0xc4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d103      	bne.n	8001eb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40014400 	.word	0x40014400

08001ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	f023 0201 	bic.w	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f023 030a 	bic.w	r3, r3, #10
 8001f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	621a      	str	r2, [r3, #32]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	f023 0210 	bic.w	r2, r3, #16
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	031b      	lsls	r3, r3, #12
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	621a      	str	r2, [r3, #32]
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f043 0307 	orr.w	r3, r3, #7
 8001fb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	609a      	str	r2, [r3, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	021a      	lsls	r2, r3, #8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	609a      	str	r2, [r3, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800201c:	2302      	movs	r3, #2
 800201e:	e04f      	b.n	80020c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a21      	ldr	r2, [pc, #132]	; (80020cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d108      	bne.n	800205c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002050:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d009      	beq.n	8002094 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d004      	beq.n	8002094 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a10      	ldr	r2, [pc, #64]	; (80020d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d10c      	bne.n	80020ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800209a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40014000 	.word	0x40014000

080020d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <__libc_init_array>:
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	4d0d      	ldr	r5, [pc, #52]	; (8002148 <__libc_init_array+0x38>)
 8002114:	4c0d      	ldr	r4, [pc, #52]	; (800214c <__libc_init_array+0x3c>)
 8002116:	1b64      	subs	r4, r4, r5
 8002118:	10a4      	asrs	r4, r4, #2
 800211a:	2600      	movs	r6, #0
 800211c:	42a6      	cmp	r6, r4
 800211e:	d109      	bne.n	8002134 <__libc_init_array+0x24>
 8002120:	4d0b      	ldr	r5, [pc, #44]	; (8002150 <__libc_init_array+0x40>)
 8002122:	4c0c      	ldr	r4, [pc, #48]	; (8002154 <__libc_init_array+0x44>)
 8002124:	f000 f820 	bl	8002168 <_init>
 8002128:	1b64      	subs	r4, r4, r5
 800212a:	10a4      	asrs	r4, r4, #2
 800212c:	2600      	movs	r6, #0
 800212e:	42a6      	cmp	r6, r4
 8002130:	d105      	bne.n	800213e <__libc_init_array+0x2e>
 8002132:	bd70      	pop	{r4, r5, r6, pc}
 8002134:	f855 3b04 	ldr.w	r3, [r5], #4
 8002138:	4798      	blx	r3
 800213a:	3601      	adds	r6, #1
 800213c:	e7ee      	b.n	800211c <__libc_init_array+0xc>
 800213e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002142:	4798      	blx	r3
 8002144:	3601      	adds	r6, #1
 8002146:	e7f2      	b.n	800212e <__libc_init_array+0x1e>
 8002148:	080021c0 	.word	0x080021c0
 800214c:	080021c0 	.word	0x080021c0
 8002150:	080021c0 	.word	0x080021c0
 8002154:	080021c4 	.word	0x080021c4

08002158 <memset>:
 8002158:	4402      	add	r2, r0
 800215a:	4603      	mov	r3, r0
 800215c:	4293      	cmp	r3, r2
 800215e:	d100      	bne.n	8002162 <memset+0xa>
 8002160:	4770      	bx	lr
 8002162:	f803 1b01 	strb.w	r1, [r3], #1
 8002166:	e7f9      	b.n	800215c <memset+0x4>

08002168 <_init>:
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	bf00      	nop
 800216c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216e:	bc08      	pop	{r3}
 8002170:	469e      	mov	lr, r3
 8002172:	4770      	bx	lr

08002174 <_fini>:
 8002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002176:	bf00      	nop
 8002178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217a:	bc08      	pop	{r3}
 800217c:	469e      	mov	lr, r3
 800217e:	4770      	bx	lr
